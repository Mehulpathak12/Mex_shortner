<!DOCTYPE html>
<html lang="en" class="h-full scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>API Documentation</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    pre::-webkit-scrollbar { height: 6px; }
    pre::-webkit-scrollbar-thumb { background: rgba(100,100,100,0.4); border-radius: 3px; }
    .accordion-content { transition: max-height 0.3s ease; overflow: hidden; }
  </style>
</head>
<body class="flex h-full bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 antialiased">

  <aside id="sidebar" class="hidden md:flex flex-col w-64 bg-white dark:bg-gray-800 border-r dark:border-gray-700 sticky top-0 h-screen">
    <div class="px-6 py-4 flex items-center justify-between border-b dark:border-gray-700">
      <h1 class="text-xl font-extrabold">MEX-Shortner</h1>
      <!--<button id="theme-toggle" class="p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700">üåì</button>-->
    </div>
    <div class="px-6 py-4">
      <input id="search" type="text" placeholder="üîç Search..." class="w-full px-3 py-2 rounded-lg border dark:bg-gray-700 dark:border-gray-600 focus:outline-none"/>
    </div>
    <nav id="nav-list" class="flex-1 overflow-auto px-2 space-y-1"></nav>
  </aside>

  <main class="flex-1 flex flex-col overflow-auto">
    <div class="md:hidden flex items-center justify-between bg-white dark:bg-gray-800 p-4 border-b dark:border-gray-700">
      <button id="mobile-menu-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700">‚ò∞</button>
      <h1 class="text-lg font-semibold">API Docs</h1>
      <button id="theme-toggle-mobile" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700">üåì</button>
    </div>
    <div id="sections" class="p-6 space-y-6 overflow-auto"></div>
  </main>

  <script>
    const routes = [
      {
        id: 'home', title: 'GET /', icon: 'üè†', desc: 'Returns "Home Page".',
        sections: [
          { header: 'Response', code: `HTTP/1.1 200 OK\nContent-Type: HTML/Page\n\nHome Page` }
        ]
      },
      {
        id: 'register', title: 'POST /api/register', icon: 'üìù', desc: 'Register a new user.',
        sections: [
          { header: 'Input', code: `name (string)\nemail (string)\npassword (string, min 6 chars)` },
          { header: 'User Exists', code: `400\n{ success: false, message: 'Email already in use' }` },
          { header: 'Validation Error', code: `400\n{ success: false, errors: [ { msg, param, location } ] }` },
          { header: 'Success', code: `201\n{ success: true, message: 'User registered successfully', token: '<JWT>', user: { id, name, email, apikey } }` },
          { header: 'Server Error', code: `500\n{ success: false, message: 'Server error' }` },
          { header: 'Example Output', code: `{\n  "success": true,\n  "message": "User registered successfully",\n  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\n  "user": {\n    "id": "6866bcebd5aba61cb66a5187",\n    "name": "Mehul Pathak",\n    "email": "mehulpathak48@gmail.com",\n    "apikey": "d4b2cffc8535e3ec9dd42b54685473661cba2e950894acc424f97718c9075766"\n  }\n}` }
        ]
      },
      {
        id: 'login', title: 'POST /api/login', icon: 'üîë', desc: 'Authenticate user.',
        sections: [
          { header: 'Input', code: `email (string)\npassword (string)` },
          { header: 'Invalid Credentials', code: `401\n{ success: false, message: 'Invalid credentials' }` },
          { header: 'Success', code: `200\n{ success: true, message: 'Login successful', token: '<JWT>', user: { id, name, email, apikey } }` }
        ]
      },
      {
        id: 'reset-api', title: 'GET /api/resetAPI', icon: 'üîÑ', desc: 'Reset API key. Auth required.',
        sections: [
          { header: 'Auth', code: `Header: Authorization: Bearer <token>\nOR Cookie: token=<jwt>` },
          { header: 'User Not Found', code: `404\n{ success: false, message: 'User not found' }` },
          { header: 'Success', code: `200\n{ success: true, message: 'API key reset successfully', apikey: 'c899df...' }` }
        ]
      },
      {
        id: 'create', title: 'POST /api/create', icon: 'üîó', desc: 'Create short URL. Auth required.',
        sections: [
          { header: 'Input', code: `originalUrl (valid URL)\npassword (optional string)\nexpiresAt (optional int timestamp)\nclickLimit (optional int >=1)` },
          { header: 'Success', code: `200\n{ success: true, shortUrl: 'http://mexo.onrender.com/he5ufc', slug: 'he5ufc', expiresAt: '2025-08-01T00:00:00.000Z', clickLimit: 5 }` }
        ]
      },
      {
        id: 'create-token', title: 'POST /api/create/token?apikey=<API_KEY>', icon: 'üîëüîó', desc: 'Create with API key.',
        sections: [
          { header: 'Missing Key', code: `401\n{ success: false, message: 'API key is required' }` },
          { header: 'Invalid Key', code: `403\n{ success: false, message: 'Invalid API key' }` },
          { header: 'Success', code: `200\n{ success: true, shortUrl, slug, expiresAt, clickLimit }` }
        ]
      },
      {
        id: 'profile', title: 'GET /api/profile', icon: 'üë§', desc: 'Get user profile & usage. Auth required.',
        sections: [
          { header: 'Success', code: `200\n{ usage: { totalUrls:3, totalClicks:2 }, _id, name, email, apikey, createdAt, updatedAt }` }
        ]
      },
      {
        id: 'change-password', title: 'POST /api/change-password', icon: 'üîí', desc: 'Change password. Auth required.',
        sections: [
          { header: 'Input', code: `currentPassword (string)\nnewPassword (string, min 6 chars)` },
          { header: 'Unauthorized', code: `401\n{ success: false, message: 'Unauthorized' }` },
          { header: 'Missing Fields', code: `400\n{ success: false, message: 'Both passwords are required' }` },
          { header: 'Too Short', code: `400\n{ success: false, message: 'New password must be at least 6 characters' }` },
          { header: 'Incorrect Current', code: `403\n{ success: false, message: 'Current password is incorrect' }` },
          { header: 'User Not Found', code: `404\n{ success: false, message: 'User not found' }` },
          { header: 'Success', code: `200\n{ success: true, message: 'Password changed successfully' }` }
        ]
      },
      {
        id: 'all-url', title: 'GET /api/allURL', icon: 'üìä', desc: 'List all URLs. Auth required.',
        sections: [
          { header: 'Success', code: `200\n{ success: true, count:2, data:[ { _id, userId, originalUrl, slug, shortUrl, password, expiresAt, isOneTime, clickLimit, clickCount, isActive, createdByIp, createdAt, updatedAt }, ... ] }` }
        ]
      },
      {
        id: 'analytics', title: 'GET /api/analytics/:slug', icon: 'üìà', desc: 'Get analytics. Auth required.',
        sections: [
          { header: 'Not Found/Unauthorized', code: `404\n{ error: 'Link not found or unauthorized' }` },
          { header: 'Success', code: `200\n{ slug, totalClicks, topIps:[], clicksPerDay:[] }` }
        ]
      },
      {
        id: 'delete-url', title: 'DELETE /api/:slug', icon: 'üóëÔ∏è', desc: 'Delete URL. Auth required.',
        sections: [
          { header: 'Not Found/Unauthorized', code: `404\n{ success: false, message: 'URL not found or not yours' }` },
          { header: 'Success', code: `200\n{ success: true, message: 'Short URL deleted successfully', deletedSlug, clicksRemoved }` }
        ]
      },
      {
        id: 'redirect', title: 'GET /:slug', icon: '‚û°Ô∏è', desc: 'Redirect to original URL.',
        sections: [
          { header: 'Not Found/Inactive', code: `404\nrenders error page: 'Link not found or inactive'` },
          { header: 'Expired', code: `410\nrenders error page: 'Link expired'` },
          { header: 'Click Limit Reached', code: `410\nrenders error page: 'Click limit reached'` },
          { header: 'Password Protected', code: `asks for password then redirects` },
          { header: 'Success', code: `redirect to originalUrl` }
        ]
      }
    ];

    const navList = document.getElementById('nav-list'), sections = document.getElementById('sections');
    routes.forEach(r => {
      const a = document.createElement('a');
      a.href = `#${r.id}`;
      a.className = 'block px-3 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700';
      a.innerHTML = `<span class="mr-2">${r.icon}</span>${r.title}`;
      navList.append(a);
      const sec = document.createElement('section');
      sec.id = r.id;
      sec.className = 'border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm overflow-hidden';
      sec.innerHTML = `<header class="flex justify-between items-center px-4 py-3 bg-gray-100 dark:bg-gray-800 cursor-pointer"><h2 class="text-lg font-semibold flex items-center"><span class="mr-2">${r.icon}</span>${r.title}</h2><span class="toggle-icon text-xl">‚ñ∫</span></header><div class="accordion-content px-4 py-3 hidden"><p class="mb-4">${r.desc}</p>${r.sections.map(s=>`<h3 class="text-md font-medium mt-4">${s.header}</h3><pre class="bg-gray-900 text-green-200 p-3 rounded overflow-auto"><code>${s.code}</code></pre>`).join('')}</div>`;
      sections.append(sec);
    });

    document.querySelectorAll('section header').forEach(h=>{
      h.onclick=()=>{const c=h.nextElementSibling,i=h.querySelector('.toggle-icon');c.classList.toggle('hidden');i.textContent=c.classList.contains('hidden')?'‚ñ∫':'‚ñº';};
    });
    document.getElementById('search').oninput=e=>{
      const q=e.target.value.toLowerCase();
      document.querySelectorAll('#nav-list a').forEach(l=>{
        const ok=l.textContent.toLowerCase().includes(q);
        l.style.display=ok?'block':'none';
        document.getElementById(l.getAttribute('href').slice(1)).style.display=ok?'':'none';
      });
    };
    const toggleTheme=()=>{document.documentElement.classList.toggle('dark');localStorage.theme=document.documentElement.classList.contains('dark')?'dark':'light';};
    if(localStorage.theme==='dark'||(!('theme' in localStorage)&&window.matchMedia('(prefers-color-scheme:dark)').matches))document.documentElement.classList.add('dark');
    document.getElementById('theme-toggle').onclick=toggleTheme;
    document.getElementById('theme-toggle-mobile').onclick=toggleTheme;
    document.getElementById('mobile-menu-btn').onclick=()=>{document.getElementById('sidebar').classList.toggle('hidden');};
  </script>
</body>
</html>
